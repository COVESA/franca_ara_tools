/*******************************************************************************
* This file has been generated by Franca's FDeployGenerator.
* Source: deployment specification 'org.genivi.commonapi.someip.deployment'
*******************************************************************************/
package org.genivi.commonapi.someip;

import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.EObject;
import org.franca.core.franca.FArgument;
import org.franca.core.franca.FArrayType;
import org.franca.core.franca.FAttribute;
import org.franca.core.franca.FBroadcast;
import org.franca.core.franca.FEnumerationType;
import org.franca.core.franca.FEnumerator;
import org.franca.core.franca.FField;
import org.franca.core.franca.FInterface;
import org.franca.core.franca.FMethod;
import org.franca.core.franca.FModelElement;
import org.franca.core.franca.FStructType;
import org.franca.core.franca.FUnionType;
import org.franca.deploymodel.core.FDeployedInterface;
import org.franca.deploymodel.core.FDeployedRootElement;
import org.franca.deploymodel.core.FDeployedTypeCollection;
import org.franca.deploymodel.core.MappingGenericPropertyAccessor;
import org.franca.deploymodel.dsl.fDeploy.FDCompoundOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDEnumValue;
import org.franca.deploymodel.dsl.fDeploy.FDEnumerationOverwrites;
import org.franca.deploymodel.dsl.fDeploy.FDExtensionElement;
import org.franca.deploymodel.dsl.fDeploy.FDExtensionRoot;
import org.franca.deploymodel.dsl.fDeploy.FDField;
import org.franca.deploymodel.dsl.fDeploy.FDOverwriteElement;
import org.franca.deploymodel.dsl.fDeploy.FDTypeOverwrites;

import com.google.common.collect.Maps;

/**
 * This is a collection of all interfaces and classes needed for
 * accessing deployment properties according to deployment specification
 * 'org.genivi.commonapi.someip.deployment'.
 */
public class DeploymentV1 {

	/**
	 * Enumerations for deployment specification org.genivi.commonapi.someip.deployment.
	 */
	public interface Enums
		extends org.genivi.commonapi.core.DeploymentV1.Enums
	{
		public enum SomeIpDefaultErrorCoding {
			Header
		}
		 
		public enum SomeIpAttributeEndianess {
			le, be
		}
		 
		public enum SomeIpAttributeCRCWidth {
			zero, one, four
		}
		 
		public enum SomeIpErrorCoding {
			Header
		}
		 
		public enum SomeIpMethodEndianess {
			le, be
		}
		 
		public enum SomeIpMethodCRCWidth {
			zero, one, four
		}
		 
		public enum SomeIpBroadcastEndianess {
			le, be
		}
		 
		public enum SomeIpBroadcastCRCWidth {
			zero, one, four
		}
		 
		public enum SomeIpStringEncoding {
			utf8, utf16le, utf16be
		}
		 
	}

	/**
	 * Interface for data deployment properties for 'org.genivi.commonapi.someip.deployment' specification
	 * 
	 * This is the data types related part only.
	 */
	public interface IDataPropertyAccessor
		extends Enums, org.genivi.commonapi.core.DeploymentV1.IDataPropertyAccessor
	{
		// host 'arrays'
		public Integer getSomeIpArrayMinLength(FArrayType obj);
		public Integer getSomeIpArrayMinLength(FField obj);
		public Integer getSomeIpArrayMaxLength(FArrayType obj);
		public Integer getSomeIpArrayMaxLength(FField obj);
		public Integer getSomeIpArrayLengthWidth(FArrayType obj);
		public Integer getSomeIpArrayLengthWidth(FField obj);
			
		// host 'unions'
		public Integer getSomeIpUnionLengthWidth(FUnionType obj);
		public Integer getSomeIpUnionTypeWidth(FUnionType obj);
		public Boolean getSomeIpUnionDefaultOrder(FUnionType obj);
		public Integer getSomeIpUnionMaxLength(FUnionType obj);
			
		// host 'structs'
		public Integer getSomeIpStructLengthWidth(FStructType obj);
			
		// host 'enumerations'
		public Integer getSomeIpEnumWidth(FEnumerationType obj);
		public Integer getSomeIpEnumBitWidth(FEnumerationType obj);
		public Integer getSomeIpEnumInvalidValue(FEnumerationType obj);
			
		// host 'strings'
		public Integer getSomeIpStringLength(EObject obj);
		public Integer getSomeIpStringLengthWidth(EObject obj);
		public SomeIpStringEncoding getSomeIpStringEncoding(EObject obj);
			
		// host 'byte_buffers'
		public Integer getSomeIpByteBufferMaxLength(EObject obj);
		public Integer getSomeIpByteBufferMinLength(EObject obj);
			
		// host 'struct_fields'
		public Integer getSomeIpStructArrayMinLength(FField obj);
		public Integer getSomeIpStructArrayMaxLength(FField obj);
		public Integer getSomeIpStructArrayLengthWidth(FField obj);
		public Integer getSomeIpStructUnionLengthWidth(FField obj);
		public Integer getSomeIpStructUnionTypeWidth(FField obj);
		public Boolean getSomeIpStructUnionDefaultOrder(FField obj);
		public Integer getSomeIpStructUnionMaxLength(FField obj);
		public Integer getSomeIpStructStructLengthWidth(FField obj);
		public Integer getSomeIpStructEnumWidth(FField obj);
		public Integer getSomeIpStructEnumBitWidth(FField obj);
		public Integer getSomeIpStructEnumInvalidValue(FField obj);
		public Integer getSomeIpStructIntegerBitWidth(FField obj);
		public Integer getSomeIpStructIntegerInvalidValue(FField obj);
			
		// host 'union_fields'
		public Integer getSomeIpUnionArrayMinLength(FField obj);
		public Integer getSomeIpUnionArrayMaxLength(FField obj);
		public Integer getSomeIpUnionArrayLengthWidth(FField obj);
		public Integer getSomeIpUnionUnionLengthWidth(FField obj);
		public Integer getSomeIpUnionUnionTypeWidth(FField obj);
		public Boolean getSomeIpUnionUnionDefaultOrder(FField obj);
		public Integer getSomeIpUnionUnionMaxLength(FField obj);
		public Integer getSomeIpUnionStructLengthWidth(FField obj);
		public Integer getSomeIpUnionEnumWidth(FField obj);
		public Integer getSomeIpUnionEnumBitWidth(FField obj);
		public Integer getSomeIpUnionIntegerBitWidth(FField obj);
			
		
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FField object. I.e., the FField obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FField which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FField obj);
	
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FArrayType object. I.e., the FArrayType obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArrayType which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj);
	}

	/**
	 * Helper class for data-related property accessors.
	 */		
	public static class DataPropertyAccessorHelper implements Enums
	{
		final private MappingGenericPropertyAccessor target;
		final private IDataPropertyAccessor owner;
		
		public DataPropertyAccessorHelper(
			MappingGenericPropertyAccessor target,
			IDataPropertyAccessor owner
		) {
			this.target = target;
			this.owner = owner;
		}
	
		public static SomeIpDefaultErrorCoding convertSomeIpDefaultErrorCoding(String val) {
			if (val.equals("Header"))
				return SomeIpDefaultErrorCoding.Header;
			return null;
		}
		
		public static SomeIpAttributeEndianess convertSomeIpAttributeEndianess(String val) {
			if (val.equals("le"))
				return SomeIpAttributeEndianess.le; else 
			if (val.equals("be"))
				return SomeIpAttributeEndianess.be;
			return null;
		}
		
		public static SomeIpAttributeCRCWidth convertSomeIpAttributeCRCWidth(String val) {
			if (val.equals("zero"))
				return SomeIpAttributeCRCWidth.zero; else 
			if (val.equals("one"))
				return SomeIpAttributeCRCWidth.one; else 
			if (val.equals("four"))
				return SomeIpAttributeCRCWidth.four;
			return null;
		}
		
		public static SomeIpErrorCoding convertSomeIpErrorCoding(String val) {
			if (val.equals("Header"))
				return SomeIpErrorCoding.Header;
			return null;
		}
		
		public static SomeIpMethodEndianess convertSomeIpMethodEndianess(String val) {
			if (val.equals("le"))
				return SomeIpMethodEndianess.le; else 
			if (val.equals("be"))
				return SomeIpMethodEndianess.be;
			return null;
		}
		
		public static SomeIpMethodCRCWidth convertSomeIpMethodCRCWidth(String val) {
			if (val.equals("zero"))
				return SomeIpMethodCRCWidth.zero; else 
			if (val.equals("one"))
				return SomeIpMethodCRCWidth.one; else 
			if (val.equals("four"))
				return SomeIpMethodCRCWidth.four;
			return null;
		}
		
		public static SomeIpBroadcastEndianess convertSomeIpBroadcastEndianess(String val) {
			if (val.equals("le"))
				return SomeIpBroadcastEndianess.le; else 
			if (val.equals("be"))
				return SomeIpBroadcastEndianess.be;
			return null;
		}
		
		public static SomeIpBroadcastCRCWidth convertSomeIpBroadcastCRCWidth(String val) {
			if (val.equals("zero"))
				return SomeIpBroadcastCRCWidth.zero; else 
			if (val.equals("one"))
				return SomeIpBroadcastCRCWidth.one; else 
			if (val.equals("four"))
				return SomeIpBroadcastCRCWidth.four;
			return null;
		}
		
		public static SomeIpStringEncoding convertSomeIpStringEncoding(String val) {
			if (val.equals("utf8"))
				return SomeIpStringEncoding.utf8; else 
			if (val.equals("utf16le"))
				return SomeIpStringEncoding.utf16le; else 
			if (val.equals("utf16be"))
				return SomeIpStringEncoding.utf16be;
			return null;
		}
		
		
		protected IDataPropertyAccessor getOverwriteAccessorAux(FModelElement obj) {
			FDOverwriteElement fd = (FDOverwriteElement)target.getFDElement(obj);
			FDTypeOverwrites overwrites = fd.getOverwrites();
			if (overwrites==null)
				return owner;
			else
				return new OverwriteAccessor(overwrites, owner, target);
		}
	}

	/**
	 * Accessor for deployment properties for Franca type collections according
	 * to deployment specification 'org.genivi.commonapi.someip.deployment'.
	 */		
	public static class TypeCollectionPropertyAccessor
		extends org.genivi.commonapi.core.DeploymentV1.TypeCollectionPropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;
	
		public TypeCollectionPropertyAccessor(FDeployedTypeCollection target) {
			super(target);
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		// host 'arrays'
		@Override
		public Integer getSomeIpArrayMinLength(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		@Override
		public Integer getSomeIpArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
			
		// host 'unions'
		@Override
		public Integer getSomeIpUnionLengthWidth(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionTypeWidth(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpUnionDefaultOrder(FUnionType obj) {
			return target.getBoolean(obj, "SomeIpUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpUnionMaxLength(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionMaxLength");
		}
			
		// host 'structs'
		@Override
		public Integer getSomeIpStructLengthWidth(FStructType obj) {
			return target.getInteger(obj, "SomeIpStructLengthWidth");
		}
			
		// host 'enumerations'
		@Override
		public Integer getSomeIpEnumWidth(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumWidth");
		}
		@Override
		public Integer getSomeIpEnumBitWidth(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumBitWidth");
		}
		@Override
		public Integer getSomeIpEnumInvalidValue(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumInvalidValue");
		}
			
		// host 'strings'
		@Override
		public Integer getSomeIpStringLength(EObject obj) {
			return target.getInteger(obj, "SomeIpStringLength");
		}
		@Override
		public Integer getSomeIpStringLengthWidth(EObject obj) {
			return target.getInteger(obj, "SomeIpStringLengthWidth");
		}
		@Override
		public SomeIpStringEncoding getSomeIpStringEncoding(EObject obj) {
			String e = target.getEnum(obj, "SomeIpStringEncoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpStringEncoding(e);
		}
			
		// host 'byte_buffers'
		@Override
		public Integer getSomeIpByteBufferMaxLength(EObject obj) {
			return target.getInteger(obj, "SomeIpByteBufferMaxLength");
		}
		@Override
		public Integer getSomeIpByteBufferMinLength(EObject obj) {
			return target.getInteger(obj, "SomeIpByteBufferMinLength");
		}
			
		// host 'struct_fields'
		@Override
		public Integer getSomeIpStructArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayMinLength");
		}
		@Override
		public Integer getSomeIpStructArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayMaxLength");
		}
		@Override
		public Integer getSomeIpStructArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpStructUnionLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpStructUnionTypeWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpStructUnionDefaultOrder(FField obj) {
			return target.getBoolean(obj, "SomeIpStructUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpStructUnionMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionMaxLength");
		}
		@Override
		public Integer getSomeIpStructStructLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructStructLengthWidth");
		}
		@Override
		public Integer getSomeIpStructEnumWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumWidth");
		}
		@Override
		public Integer getSomeIpStructEnumBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumBitWidth");
		}
		@Override
		public Integer getSomeIpStructEnumInvalidValue(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumInvalidValue");
		}
		@Override
		public Integer getSomeIpStructIntegerBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructIntegerBitWidth");
		}
		@Override
		public Integer getSomeIpStructIntegerInvalidValue(FField obj) {
			return target.getInteger(obj, "SomeIpStructIntegerInvalidValue");
		}
			
		// host 'union_fields'
		@Override
		public Integer getSomeIpUnionArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayMinLength");
		}
		@Override
		public Integer getSomeIpUnionArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayMaxLength");
		}
		@Override
		public Integer getSomeIpUnionArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionUnionLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionUnionTypeWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpUnionUnionDefaultOrder(FField obj) {
			return target.getBoolean(obj, "SomeIpUnionUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpUnionUnionMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionMaxLength");
		}
		@Override
		public Integer getSomeIpUnionStructLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionStructLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionEnumWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionEnumWidth");
		}
		@Override
		public Integer getSomeIpUnionEnumBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionEnumBitWidth");
		}
		@Override
		public Integer getSomeIpUnionIntegerBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionIntegerBitWidth");
		}
			
		
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for deployment properties for Franca interfaces according to
	 * deployment specification 'org.genivi.commonapi.someip.deployment'.
	 */
	public static class InterfacePropertyAccessor
		extends org.genivi.commonapi.core.DeploymentV1.InterfacePropertyAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final DataPropertyAccessorHelper helper;
	
		public InterfacePropertyAccessor(FDeployedInterface target) {
			super(target);
			this.target = target;
			this.helper = new DataPropertyAccessorHelper(target, this);
		}
		
		// host 'interfaces'
		public Integer getSomeIpServiceID(FInterface obj) {
			return target.getInteger(obj, "SomeIpServiceID");
		}
		public List<Integer> getSomeIpEventGroups(FInterface obj) {
			return target.getIntegerArray(obj, "SomeIpEventGroups");
		}
			
		// host 'attributes'
		public Integer getSomeIpGetterID(FAttribute obj) {
			return target.getInteger(obj, "SomeIpGetterID");
		}
		public Boolean getSomeIpGetterReliable(FAttribute obj) {
			return target.getBoolean(obj, "SomeIpGetterReliable");
		}
		public Integer getSomeIpGetterPriority(FAttribute obj) {
			return target.getInteger(obj, "SomeIpGetterPriority");
		}
		public Integer getSomeIpSetterID(FAttribute obj) {
			return target.getInteger(obj, "SomeIpSetterID");
		}
		public Boolean getSomeIpSetterReliable(FAttribute obj) {
			return target.getBoolean(obj, "SomeIpSetterReliable");
		}
		public Integer getSomeIpSetterPriority(FAttribute obj) {
			return target.getInteger(obj, "SomeIpSetterPriority");
		}
		public Integer getSomeIpNotifierID(FAttribute obj) {
			return target.getInteger(obj, "SomeIpNotifierID");
		}
		public Boolean getSomeIpNotifierReliable(FAttribute obj) {
			return target.getBoolean(obj, "SomeIpNotifierReliable");
		}
		public Integer getSomeIpNotifierPriority(FAttribute obj) {
			return target.getInteger(obj, "SomeIpNotifierPriority");
		}
		public Boolean getSomeIpNotifierMulticast(FAttribute obj) {
			return target.getBoolean(obj, "SomeIpNotifierMulticast");
		}
		public List<Integer> getSomeIpEventGroups(FAttribute obj) {
			return target.getIntegerArray(obj, "SomeIpEventGroups");
		}
		public SomeIpAttributeEndianess getSomeIpAttributeEndianess(FAttribute obj) {
			String e = target.getEnum(obj, "SomeIpAttributeEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpAttributeEndianess(e);
		}
		public SomeIpAttributeCRCWidth getSomeIpAttributeCRCWidth(FAttribute obj) {
			String e = target.getEnum(obj, "SomeIpAttributeCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpAttributeCRCWidth(e);
		}
			
		// host 'methods'
		public Integer getSomeIpMethodID(FMethod obj) {
			return target.getInteger(obj, "SomeIpMethodID");
		}
		public Boolean getSomeIpReliable(FMethod obj) {
			return target.getBoolean(obj, "SomeIpReliable");
		}
		public Integer getSomeIpPriority(FMethod obj) {
			return target.getInteger(obj, "SomeIpPriority");
		}
		public SomeIpErrorCoding getSomeIpErrorCoding(FMethod obj) {
			String e = target.getEnum(obj, "SomeIpErrorCoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpErrorCoding(e);
		}
		public SomeIpMethodEndianess getSomeIpMethodEndianess(FMethod obj) {
			String e = target.getEnum(obj, "SomeIpMethodEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpMethodEndianess(e);
		}
		public SomeIpMethodCRCWidth getSomeIpMethodCRCWidth(FMethod obj) {
			String e = target.getEnum(obj, "SomeIpMethodCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpMethodCRCWidth(e);
		}
			
		// host 'broadcasts'
		public Integer getSomeIpEventID(FBroadcast obj) {
			return target.getInteger(obj, "SomeIpEventID");
		}
		public Boolean getSomeIpReliable(FBroadcast obj) {
			return target.getBoolean(obj, "SomeIpReliable");
		}
		public Integer getSomeIpPriority(FBroadcast obj) {
			return target.getInteger(obj, "SomeIpPriority");
		}
		public Boolean getSomeIpMulticast(FBroadcast obj) {
			return target.getBoolean(obj, "SomeIpMulticast");
		}
		public List<Integer> getSomeIpEventGroups(FBroadcast obj) {
			return target.getIntegerArray(obj, "SomeIpEventGroups");
		}
		public SomeIpBroadcastEndianess getSomeIpBroadcastEndianess(FBroadcast obj) {
			String e = target.getEnum(obj, "SomeIpBroadcastEndianess");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpBroadcastEndianess(e);
		}
		public SomeIpBroadcastCRCWidth getSomeIpBroadcastCRCWidth(FBroadcast obj) {
			String e = target.getEnum(obj, "SomeIpBroadcastCRCWidth");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpBroadcastCRCWidth(e);
		}
			
		// host 'arrays'
		@Override
		public Integer getSomeIpArrayMinLength(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		@Override
		public Integer getSomeIpArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		public Integer getSomeIpArrayMinLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		public Integer getSomeIpArrayMinLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArrayMinLength");
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		public Integer getSomeIpArrayMaxLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		public Integer getSomeIpArrayMaxLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArrayMaxLength");
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FArrayType obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
		public Integer getSomeIpArrayLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
		public Integer getSomeIpArrayLengthWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArrayLengthWidth");
		}
			
		// host 'unions'
		@Override
		public Integer getSomeIpUnionLengthWidth(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionTypeWidth(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpUnionDefaultOrder(FUnionType obj) {
			return target.getBoolean(obj, "SomeIpUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpUnionMaxLength(FUnionType obj) {
			return target.getInteger(obj, "SomeIpUnionMaxLength");
		}
			
		// host 'structs'
		@Override
		public Integer getSomeIpStructLengthWidth(FStructType obj) {
			return target.getInteger(obj, "SomeIpStructLengthWidth");
		}
			
		// host 'enumerations'
		@Override
		public Integer getSomeIpEnumWidth(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumWidth");
		}
		@Override
		public Integer getSomeIpEnumBitWidth(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumBitWidth");
		}
		@Override
		public Integer getSomeIpEnumInvalidValue(FEnumerationType obj) {
			return target.getInteger(obj, "SomeIpEnumInvalidValue");
		}
			
		// host 'strings'
		@Override
		public Integer getSomeIpStringLength(EObject obj) {
			return target.getInteger(obj, "SomeIpStringLength");
		}
		@Override
		public Integer getSomeIpStringLengthWidth(EObject obj) {
			return target.getInteger(obj, "SomeIpStringLengthWidth");
		}
		@Override
		public SomeIpStringEncoding getSomeIpStringEncoding(EObject obj) {
			String e = target.getEnum(obj, "SomeIpStringEncoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpStringEncoding(e);
		}
			
		// host 'byte_buffers'
		@Override
		public Integer getSomeIpByteBufferMaxLength(EObject obj) {
			return target.getInteger(obj, "SomeIpByteBufferMaxLength");
		}
		@Override
		public Integer getSomeIpByteBufferMinLength(EObject obj) {
			return target.getInteger(obj, "SomeIpByteBufferMinLength");
		}
			
		// host 'attributes'
		public Integer getSomeIpAttrArrayMinLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrArrayMinLength");
		}
		public Integer getSomeIpAttrArrayMaxLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrArrayMaxLength");
		}
		public Integer getSomeIpAttrArrayLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrArrayLengthWidth");
		}
		public Integer getSomeIpAttrMapMinLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrMapMinLength");
		}
		public Integer getSomeIpAttrMapMaxLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrMapMaxLength");
		}
		public Integer getSomeIpAttrMapLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrMapLengthWidth");
		}
		public Integer getSomeIpAttrUnionLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrUnionLengthWidth");
		}
		public Integer getSomeIpAttrUnionTypeWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrUnionTypeWidth");
		}
		public Boolean getSomeIpAttrUnionDefaultOrder(FAttribute obj) {
			return target.getBoolean(obj, "SomeIpAttrUnionDefaultOrder");
		}
		public Integer getSomeIpAttrUnionMaxLength(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrUnionMaxLength");
		}
		public Integer getSomeIpAttrStructLengthWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrStructLengthWidth");
		}
		public Integer getSomeIpAttrEnumWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrEnumWidth");
		}
		public Integer getSomeIpAttrEnumBitWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrEnumBitWidth");
		}
		public Integer getSomeIpAttrIntegerBitWidth(FAttribute obj) {
			return target.getInteger(obj, "SomeIpAttrIntegerBitWidth");
		}
			
		// host 'arguments'
		public Integer getSomeIpArgArrayMinLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgArrayMinLength");
		}
		public Integer getSomeIpArgArrayMaxLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgArrayMaxLength");
		}
		public Integer getSomeIpArgArrayLengthWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgArrayLengthWidth");
		}
		public Integer getSomeIpArgMapMinLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgMapMinLength");
		}
		public Integer getSomeIpArgMapMaxLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgMapMaxLength");
		}
		public Integer getSomeIpArgMapLengthWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgMapLengthWidth");
		}
		public Integer getSomeIpArgUnionLengthWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgUnionLengthWidth");
		}
		public Integer getSomeIpArgUnionTypeWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgUnionTypeWidth");
		}
		public Boolean getSomeIpArgUnionDefaultOrder(FArgument obj) {
			return target.getBoolean(obj, "SomeIpArgUnionDefaultOrder");
		}
		public Integer getSomeIpArgUnionMaxLength(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgUnionMaxLength");
		}
		public Integer getSomeIpArgStructLengthWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgStructLengthWidth");
		}
		public Integer getSomeIpArgEnumWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgEnumWidth");
		}
		public Integer getSomeIpArgEnumBitWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgEnumBitWidth");
		}
		public Integer getSomeIpArgEnumInvalidValue(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgEnumInvalidValue");
		}
		public Integer getSomeIpArgIntegerBitWidth(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgIntegerBitWidth");
		}
		public Integer getSomeIpArgIntegerInvalidValue(FArgument obj) {
			return target.getInteger(obj, "SomeIpArgIntegerInvalidValue");
		}
			
		// host 'struct_fields'
		@Override
		public Integer getSomeIpStructArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayMinLength");
		}
		@Override
		public Integer getSomeIpStructArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayMaxLength");
		}
		@Override
		public Integer getSomeIpStructArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpStructUnionLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpStructUnionTypeWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpStructUnionDefaultOrder(FField obj) {
			return target.getBoolean(obj, "SomeIpStructUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpStructUnionMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpStructUnionMaxLength");
		}
		@Override
		public Integer getSomeIpStructStructLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructStructLengthWidth");
		}
		@Override
		public Integer getSomeIpStructEnumWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumWidth");
		}
		@Override
		public Integer getSomeIpStructEnumBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumBitWidth");
		}
		@Override
		public Integer getSomeIpStructEnumInvalidValue(FField obj) {
			return target.getInteger(obj, "SomeIpStructEnumInvalidValue");
		}
		@Override
		public Integer getSomeIpStructIntegerBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpStructIntegerBitWidth");
		}
		@Override
		public Integer getSomeIpStructIntegerInvalidValue(FField obj) {
			return target.getInteger(obj, "SomeIpStructIntegerInvalidValue");
		}
			
		// host 'union_fields'
		@Override
		public Integer getSomeIpUnionArrayMinLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayMinLength");
		}
		@Override
		public Integer getSomeIpUnionArrayMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayMaxLength");
		}
		@Override
		public Integer getSomeIpUnionArrayLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionArrayLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionUnionLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionUnionTypeWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionTypeWidth");
		}
		@Override
		public Boolean getSomeIpUnionUnionDefaultOrder(FField obj) {
			return target.getBoolean(obj, "SomeIpUnionUnionDefaultOrder");
		}
		@Override
		public Integer getSomeIpUnionUnionMaxLength(FField obj) {
			return target.getInteger(obj, "SomeIpUnionUnionMaxLength");
		}
		@Override
		public Integer getSomeIpUnionStructLengthWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionStructLengthWidth");
		}
		@Override
		public Integer getSomeIpUnionEnumWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionEnumWidth");
		}
		@Override
		public Integer getSomeIpUnionEnumBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionEnumBitWidth");
		}
		@Override
		public Integer getSomeIpUnionIntegerBitWidth(FField obj) {
			return target.getInteger(obj, "SomeIpUnionIntegerBitWidth");
		}
			
		
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FAttribute object. I.e., the FAttribute obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FAttribute which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FAttribute obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		/**
		 * Get an overwrite-aware accessor for deployment properties.</p>
		 *
		 * This accessor will return overwritten property values in the context 
		 * of a Franca FArgument object. I.e., the FArgument obj has a datatype
		 * which can be overwritten in the deployment definition (e.g., Franca array,
		 * struct, union or enumeration). The accessor will return the overwritten values.
		 * If the deployment definition didn't overwrite the value, this accessor will
		 * delegate to its parent accessor.</p>
		 *
		 * @param obj a Franca FArgument which is the context for the accessor
		 * @return the overwrite-aware accessor
		 */
		public IDataPropertyAccessor getOverwriteAccessor(FArgument obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			return helper.getOverwriteAccessorAux(obj);
		}
	}

	/**
	 * Accessor for deployment properties for 'provider' roots
	 * (which are defined by the 'providers and instances' extension)
	 * according to the 'org.genivi.commonapi.someip.deployment' specification.
	 */
	public static class ProviderPropertyAccessor
		extends org.genivi.commonapi.core.DeploymentV1.ProviderPropertyAccessor
		implements Enums
	{
		final private FDeployedRootElement<FDExtensionRoot> target;
	
		public ProviderPropertyAccessor(FDeployedRootElement<FDExtensionRoot> target) {
			super(target);
			this.target = target;
		}
		
		// host 'instances'
		public Integer getSomeIpInstanceID(FDExtensionElement obj) {
			return target.getInteger(obj, "SomeIpInstanceID");
		}
		public String getSomeIpUnicastAddress(FDExtensionElement obj) {
			return target.getString(obj, "SomeIpUnicastAddress");
		}
		public Integer getSomeIpReliableUnicastPort(FDExtensionElement obj) {
			return target.getInteger(obj, "SomeIpReliableUnicastPort");
		}
		public Integer getSomeIpUnreliableUnicastPort(FDExtensionElement obj) {
			return target.getInteger(obj, "SomeIpUnreliableUnicastPort");
		}
		public List<Integer> getSomeIpMulticastEventGroups(FDExtensionElement obj) {
			return target.getIntegerArray(obj, "SomeIpMulticastEventGroups");
		}
		public List<String> getSomeIpMulticastAddresses(FDExtensionElement obj) {
			return target.getStringArray(obj, "SomeIpMulticastAddresses");
		}
		public List<Integer> getSomeIpMulticastPorts(FDExtensionElement obj) {
			return target.getIntegerArray(obj, "SomeIpMulticastPorts");
		}
		public SomeIpDefaultErrorCoding getSomeIpDefaultErrorCoding(FDExtensionElement obj) {
			String e = target.getEnum(obj, "SomeIpDefaultErrorCoding");
			if (e==null) return null;
			return DataPropertyAccessorHelper.convertSomeIpDefaultErrorCoding(e);
		}
		
	}
	
	/**
	 * Accessor for getting overwritten property values.
	 */		
	public static class OverwriteAccessor
		extends org.genivi.commonapi.core.DeploymentV1.OverwriteAccessor
		implements IDataPropertyAccessor
	{
		private final MappingGenericPropertyAccessor target;
		private final IDataPropertyAccessor delegate;
		
		private final FDTypeOverwrites overwrites;
		private final Map<FField, FDField> mappedFields;
		private final Map<FEnumerator, FDEnumValue> mappedEnumerators;
	
		public OverwriteAccessor(
				FDTypeOverwrites overwrites,
				IDataPropertyAccessor delegate,
				MappingGenericPropertyAccessor genericAccessor)
		{
			super(overwrites, delegate, genericAccessor);
			this.target = genericAccessor;
			this.delegate = delegate;
	
			this.overwrites = overwrites;
			this.mappedFields = Maps.newHashMap();
			this.mappedEnumerators = Maps.newHashMap();
			if (overwrites!=null) {
				if (overwrites instanceof FDCompoundOverwrites) {
					// build mapping for compound fields
					for(FDField f : ((FDCompoundOverwrites)overwrites).getFields()) {
						this.mappedFields.put(f.getTarget(), f);
					}
				}
				if (overwrites instanceof FDEnumerationOverwrites) {
					// build mapping for enumerators
					for(FDEnumValue e : ((FDEnumerationOverwrites)overwrites).getEnumerators()) {
						this.mappedEnumerators.put(e.getTarget(), e);
					}
				}
			}
		}
		
		// host 'arrays'
		@Override
		public Integer getSomeIpArrayMinLength(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayMinLength(obj);
		}
		@Override
		public Integer getSomeIpArrayMinLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayMinLength(obj);
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayMaxLength(obj);
		}
		@Override
		public Integer getSomeIpArrayMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayMaxLength(obj);
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FArrayType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpArrayLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpArrayLengthWidth(obj);
		}
			
		// host 'unions'
		@Override
		public Integer getSomeIpUnionLengthWidth(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpUnionLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionTypeWidth(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpUnionTypeWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionTypeWidth(obj);
		}
		@Override
		public Boolean getSomeIpUnionDefaultOrder(FUnionType obj) {
			if (overwrites!=null) {
				Boolean v = target.getBoolean(overwrites, "SomeIpUnionDefaultOrder");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionDefaultOrder(obj);
		}
		@Override
		public Integer getSomeIpUnionMaxLength(FUnionType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpUnionMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionMaxLength(obj);
		}
			
		// host 'structs'
		@Override
		public Integer getSomeIpStructLengthWidth(FStructType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpStructLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructLengthWidth(obj);
		}
			
		// host 'enumerations'
		@Override
		public Integer getSomeIpEnumWidth(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpEnumWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpEnumWidth(obj);
		}
		@Override
		public Integer getSomeIpEnumBitWidth(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpEnumBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpEnumBitWidth(obj);
		}
		@Override
		public Integer getSomeIpEnumInvalidValue(FEnumerationType obj) {
			if (overwrites!=null) {
				Integer v = target.getInteger(overwrites, "SomeIpEnumInvalidValue");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpEnumInvalidValue(obj);
		}
			
		// host 'strings'
		@Override
		public Integer getSomeIpStringLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "SomeIpStringLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "SomeIpStringLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getSomeIpStringLength(obj);
		}
		@Override
		public Integer getSomeIpStringLengthWidth(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "SomeIpStringLengthWidth");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "SomeIpStringLengthWidth");
					if (v!=null)
						return v;
				}
			}
			return delegate.getSomeIpStringLengthWidth(obj);
		}
		@Override
		public SomeIpStringEncoding getSomeIpStringEncoding(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					String e = target.getEnum(fo, "SomeIpStringEncoding");
					if (e!=null) {
						return DataPropertyAccessorHelper.convertSomeIpStringEncoding(e);
					}
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					String e = target.getEnum(obj, "SomeIpStringEncoding");
					if (e!=null) {
						return DataPropertyAccessorHelper.convertSomeIpStringEncoding(e);
					}
				}
			}
			return delegate.getSomeIpStringEncoding(obj);
		}
			
		// host 'byte_buffers'
		@Override
		public Integer getSomeIpByteBufferMaxLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "SomeIpByteBufferMaxLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "SomeIpByteBufferMaxLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getSomeIpByteBufferMaxLength(obj);
		}
		@Override
		public Integer getSomeIpByteBufferMinLength(EObject obj) {
			if (obj instanceof FField) {
				// check if this field is overwritten
				if (mappedFields.containsKey(obj)) {
					FDField fo = mappedFields.get(obj);
					Integer v = target.getInteger(fo, "SomeIpByteBufferMinLength");
					if (v!=null)
						return v;
				}
			} else {
				if (overwrites!=null) {
					// this is some model element which might be overwritten
					Integer v = target.getInteger(obj, "SomeIpByteBufferMinLength");
					if (v!=null)
						return v;
				}
			}
			return delegate.getSomeIpByteBufferMinLength(obj);
		}
			
		// host 'struct_fields'
		@Override
		public Integer getSomeIpStructArrayMinLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructArrayMinLength(obj);
		}
		@Override
		public Integer getSomeIpStructArrayMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructArrayMaxLength(obj);
		}
		@Override
		public Integer getSomeIpStructArrayLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructArrayLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpStructUnionLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructUnionLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructUnionLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpStructUnionTypeWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructUnionTypeWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructUnionTypeWidth(obj);
		}
		@Override
		public Boolean getSomeIpStructUnionDefaultOrder(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Boolean v = target.getBoolean(fo, "SomeIpStructUnionDefaultOrder");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructUnionDefaultOrder(obj);
		}
		@Override
		public Integer getSomeIpStructUnionMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructUnionMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructUnionMaxLength(obj);
		}
		@Override
		public Integer getSomeIpStructStructLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructStructLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructStructLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpStructEnumWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructEnumWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructEnumWidth(obj);
		}
		@Override
		public Integer getSomeIpStructEnumBitWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructEnumBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructEnumBitWidth(obj);
		}
		@Override
		public Integer getSomeIpStructEnumInvalidValue(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructEnumInvalidValue");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructEnumInvalidValue(obj);
		}
		@Override
		public Integer getSomeIpStructIntegerBitWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructIntegerBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructIntegerBitWidth(obj);
		}
		@Override
		public Integer getSomeIpStructIntegerInvalidValue(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpStructIntegerInvalidValue");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpStructIntegerInvalidValue(obj);
		}
			
		// host 'union_fields'
		@Override
		public Integer getSomeIpUnionArrayMinLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionArrayMinLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionArrayMinLength(obj);
		}
		@Override
		public Integer getSomeIpUnionArrayMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionArrayMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionArrayMaxLength(obj);
		}
		@Override
		public Integer getSomeIpUnionArrayLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionArrayLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionArrayLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionUnionLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionUnionLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionUnionLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionUnionTypeWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionUnionTypeWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionUnionTypeWidth(obj);
		}
		@Override
		public Boolean getSomeIpUnionUnionDefaultOrder(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Boolean v = target.getBoolean(fo, "SomeIpUnionUnionDefaultOrder");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionUnionDefaultOrder(obj);
		}
		@Override
		public Integer getSomeIpUnionUnionMaxLength(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionUnionMaxLength");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionUnionMaxLength(obj);
		}
		@Override
		public Integer getSomeIpUnionStructLengthWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionStructLengthWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionStructLengthWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionEnumWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionEnumWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionEnumWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionEnumBitWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionEnumBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionEnumBitWidth(obj);
		}
		@Override
		public Integer getSomeIpUnionIntegerBitWidth(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				Integer v = target.getInteger(fo, "SomeIpUnionIntegerBitWidth");
				if (v!=null)
					return v;
			}
			return delegate.getSomeIpUnionIntegerBitWidth(obj);
		}
			
		
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FField obj) {
			// check if this field is overwritten
			if (mappedFields.containsKey(obj)) {
				FDField fo = mappedFields.get(obj);
				FDTypeOverwrites overwrites = fo.getOverwrites();
				if (overwrites==null)
					return this; // TODO: correct?
				else
					// TODO: this or delegate?
					return new OverwriteAccessor(overwrites, this, target);
				
			}
			return delegate.getOverwriteAccessor(obj);
		}
	
		@Override
		public IDataPropertyAccessor getOverwriteAccessor(FArrayType obj) {
			// check if this array is overwritten
			if (overwrites!=null) {
				// TODO: this or delegate?
				return new OverwriteAccessor(overwrites, this, target);
			}
			return delegate.getOverwriteAccessor(obj);
		}
	}
}
	
